package greentic:oauth@0.1.0;

type header = record {
    name: string,
    value: string,
};

enum owner-kind {
    user,
    service,
}

enum visibility {
    private,
    team,
    tenant,
}

type initiate-request = record {
    flow-id: string,
    owner-kind: owner-kind,
    owner-id: string,
    scopes: list<string>,
    redirect-uri: option<string>,
    visibility: option<visibility>,
};

type initiate-response = record {
    flow-id: string,
    redirect-url: string,
    state: string,
};

type flow-result = record {
    flow-id: string,
    env: string,
    tenant: string,
    team: option<string>,
    provider: string,
    storage-path: string,
    token-handle-claims-json: string,
};

type signed-fetch-request = record {
    token-handle: string,
    method: string,
    url: string,
    headers: list<header>,
    body: option<string>,
    body-encoding: string,
};

type signed-fetch-response = record {
    status: u16,
    headers: list<header>,
    body: string,
    body-encoding: string,
};

interface broker {
    health-check: func() -> string;
    initiate-auth: func(request: initiate-request) -> initiate-response;
    await-result: func(flow-id: string, timeout-ms: option<u64>) -> flow-result;
    get-access-token: func(token-handle: string, force-refresh: bool) -> record {
        access-token: string,
        expires-at: u64,
    };
    signed-fetch: func(request: signed-fetch-request) -> signed-fetch-response;
}
